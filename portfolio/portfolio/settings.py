"""
Django settings for portfolio project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
import pickle
from pathlib import Path
from dotenv import load_dotenv
from langchain.vectorstores.base import VectorStoreRetriever

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ.get("DEBUG", 1)))

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # third party
    'django_summernote',
    # apps
    'home.apps.HomeConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'home.middleware.ChatbotMiddleware'
]

ROOT_URLCONF = 'portfolio.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'portfolio.wsgi.application'

CSRF_TRUSTED_ORIGINS = ['https://*.nikhilkb.com']

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

'''
To install postgres using docker:

docker run -d --name postgres -p 5499:5432 \                                                                                                                   tyche@tyche
-e POSTGRES_USER=portfolio \
-e POSTGRES_PASSWORD=portfolio \
-e POSTGRES_DB=portfolio \
postgres:latest

'''
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': os.getenv('PGDATABASE', 'postgres'),
#         'USER': os.getenv('PGUSER', 'postgres'),
#         'PASSWORD': os.getenv('PGPASSWORD', 'postgres'),
#         'HOST': os.getenv('PGHOST', '127.0.0.1'),
#         'PORT': os.getenv('PGPORT', '5432'),
#     },
# }

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Los_Angeles'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [
        BASE_DIR / 'static_base'
    ]
STATIC_ROOT = os.getenv('STATIC_ROOT', "static")

# Media handling.
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Storage.
if not DEBUG:
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID', None)
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY', None)
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME', None)

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# site id
SITE_ID = 1

# Internal IPs
INTERNAL_IPS = ['127.0.0.1',]

# Summernote config
X_FRAME_OPTIONS = 'SAMEORIGIN'
SUMMERNOTE_CONFIG = {
    'disable_attachment': False,
    'summernote': {
            'toolbar': [
        ['style', ['bold', 'italic', 'underline', 'clear']],
        ['fontsize', ['fontsize']],
        ['color', ['color']],
        ['para', ['ul', 'ol', 'paragraph']],
        ['table', ['table']],
        ['insert', ['link', 'picture', 'video']],
        ['view', ['fullscreen', 'codeview', 'help']]
            ]
        }
    }

# Django session settings
CHATBOT_SESSION_KEY = "chatbot_session"
CHATBOT_SESSION_KEY_TRIES = ["chatbot_session_tries", 10]
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_AGE = 60 * 60 * 3 # 3 hours

# Google calendar event body
DEFAULT_EVENT_TIME = "15:00"
DEFAULT_EVENT_DELTA_DAYS = 7
EVENT_BODY = {
    "summary": "Meeting with Nikhil Bola Kamath",
    "description": "A meeting scheduled with Nikhil Bola Kamath from nikhilkb.com.",
    "start": {
        "dateTime": "{start_time}",
        "timeZone": TIME_ZONE,
    },
    "end": {
        "dateTime": "{end_time}",
        "timeZone": TIME_ZONE,
    },
    "attendees": [
        {"email": "nikhilbolakamath@gmail.com"}
    ]
}

# LangChain
LANGCHAIN_DEFAULT_MESSAGE = "Hmmm, I don't have the answer to this. You may contact Nikhil @ nikhilbolakamath@gmail.com"
LANGCHAIN_TEMPLATE = f"""You are an AI assistant for answering questions about the Nikhil Bola Kamath.

Try to answer all the questions. You can generate your answers from the context provided to you.

Be very brief in your answers and answer to the point.

If you don't know the answer, just say "{LANGCHAIN_DEFAULT_MESSAGE}".

=========
{{context}}
=========

Question: {{question}}

Answer:"""
LANGCHAIN_AGENT_SYSTEM_MESSAGE_CHAT_CONVERSATIONAL_REACT_DESCRIPTION = f"""Assistant is a large language model.

Assistant is designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, Assistant is able to generate human-like text based on the input it receives, allowing it to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.

Assistant is constantly learning and improving, and its capabilities are constantly evolving. It is able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. Additionally, Assistant is able to generate its own text based on the input it receives, allowing it to engage in discussions and provide explanations and descriptions on a wide range of topics.

Unfortunately, the Assistant is not allowed to use its own knowledge base. The Assistant always refers to it's trusty tools and absolutely does NOT try to answer by itself.

If your observations is "{LANGCHAIN_DEFAULT_MESSAGE}", your next `action` MUST BE `Final Answer` with `action_input` as "{LANGCHAIN_DEFAULT_MESSAGE}". In short you MUST return final answer as "{LANGCHAIN_DEFAULT_MESSAGE}" immediately.

If your observation is " Hello! How can I assist you today?", your next `action` MUST BE `Final Answer` with `action_input` as "Hello! How can I assist you today?". In short you MUST return final answer as "Hello! How can I assist you today?" immediately.

Overall, Assistant is a powerful system that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether you need help with a specific question or just want to have a conversation about a particular topic, Assistant is here to assist.
"""
LANGCHAIN_AGENT_SYSTEM_MESSAGE_STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION_PREFIX = f"""Respond to the human as helpfully and accurately as possible. 

Unfortunately, you are NOT allowed to use your own knowledge base. You always refers to your trusty tools and absolutely does NOT try to answer by yourself.

If your observations is "{LANGCHAIN_DEFAULT_MESSAGE}", ALWAYS return final answer as "{LANGCHAIN_DEFAULT_MESSAGE}" immediately. In short you MUST return final answer as "{LANGCHAIN_DEFAULT_MESSAGE}" immediately.

You have access to the following tools:
"""
LANGCHAIN_AGENT_SYSTEM_MESSAGE_STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION_FORMAT_INSTRUCTIONS = """Use a json blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).

Valid "action" values: "Final Answer" or {tool_names}

Provide only ONE action per $JSON_BLOB, as shown:

```
{{{{ 
    "action": $TOOL_NAME,
    "action_input": $INPUT
}}}}
```

Follow this format:

Question: input question to answer
Thought: consider previous and subsequent steps
Action:
```
    $JSON_BLOB
```
Observation: action result
... (repeat Thought/Action/Observation N times)
Thought: I know what to respond
Action:
```
{{{{
    "action": "Final Answer",
    "action_input": "Final response to human"
}}}}
```
"""
LANGCHAIN_AGENT_SYSTEM_MESSAGE_STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION_SUFFIX = """Begin! Reminder to ALWAYS respond with a valid json blob of a single action using the provided tools ONLY. You must use trusty tools always and NOT your knowledge base. Respond directly if appropriate. Format is Action:```$JSON_BLOB```then Observation:.\nThought:
"""
LANGCHAIN_GOOGLE_CALENDAR_EVENT_SCHEMA_TOOL_DESC = """Use this tool when you need to generate or create a google calendar event.

The input to this tool SHOULD be a stringyfied dictionary with the following keys: `date`, `time` and `duration`.

The key `date` parameter must be in "MM-DD-YYYY" format or an empty string.

The key `time` parameter must be in "HH:MM" format or an empty string.    
    
The key `duration` parameter must be a numeric value, the default value is 60.

To use the tool, you MUST provide keys - `time` and `date` and optionally `duration` and MUST convert the dictionary into string and pass as input.

If the user provides data like `tomorrow`, `today`, and `day after tomorrow`. then the tool will automatically generate the date for the event.
"""
LANGCHAIN_NBK_QA_TOOL_DESC = f"""Useful for when you need to answer questions, you may use this by default.

If your observation is "{LANGCHAIN_DEFAULT_MESSAGE}" immediatedly return final answer as "{LANGCHAIN_DEFAULT_MESSAGE}".

If your observation is " Hello! How can I assist you today?", immediatedly return final answer as "Hello! How can I assist you today?".
"""
LANGCHAIN_VECTORSTORE_SEARCHTYPE = "mmr"
LANGCHAIN_VECTORSTORE_SEARCHKWARGS = {
    "top_k": 6, "lambda_mult": 0.25
}
LANGCHAIN_VECTOR_STORE = "data.pkl"
LANGCHAIN_MODEL_TYPE = "openai" # ["openai" "huggingface"]
LANGCHAIN_MODEL_NAME = "gpt-3.5-turbo-16k" # ["gpt-3.5-turbo-16k", "tiiuae/falcon-7b-instruct"]
LANGCHAIN_MODEL_TEMPERATURE = 1e-2
LANGCHAIN_MODEL_MIN_LENGTH = 100
LANGCHAIN_MODEL_MAX_LENGTH = 500
LANGCHAIN_CHAIN_TYPE = "stuff"
LANGCHAIN_CHAIN_AGENT_STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION = "structured-chat-zero-shot-react-description"
LANGCHAIN_CHAIN_AGENT_CHAT_CONVERSATIONAL_REACT_DESCRIPTION = "chat-conversational-react-description"
LANGCHAIN_CHAIN_AGENT_VERBOSE = False
LANGCHAIN_CHAIN_AGENT_MAX_ITERATIONS = 2
LANGCHAIN_CHAIN_AGENT_DOMAIN_SPECIFIC_QUERY = True
LANGCHAIN_CHAIN_AGENT_EARLY_STOP = "force" # ["force", "generate"]
LANGCHAIN_VECTORSTORE_RETRIEVER = None
LANGCHAIN_CHAT_ENABLE = True
LANGCHAIN_CONVERSATIONAL_BUFFER_WINDOW_MEMORY_KEY = "chat_history"
LANGCHAIN_CONVERSATIONAL_BUFFER_WINDOW_MEMORY_K = 10
if not os.path.exists(BASE_DIR / 'static_base' / 'doc' / LANGCHAIN_VECTOR_STORE):
    print("Vectorstore not found.")
    print("Please run `python manage.py ingest --data_dir ./static_base/data --output_dir ./static_base/doc` to generate the vectorstore.")
    LANGCHAIN_CHAT_ENABLE = False
else:
    with open(BASE_DIR / 'static_base' / 'doc' / LANGCHAIN_VECTOR_STORE, "rb") as f:
        vectorstore = pickle.load(f)
    LANGCHAIN_VECTORSTORE_RETRIEVER = VectorStoreRetriever(vectorstore=vectorstore, search_type=LANGCHAIN_VECTORSTORE_SEARCHTYPE, search_kwargs=LANGCHAIN_VECTORSTORE_SEARCHKWARGS)
LANGCHAIN_CHAT_ENABLE = LANGCHAIN_VECTORSTORE_RETRIEVER and LANGCHAIN_CHAT_ENABLE